openapi: 3.0.3
info:
  title: Casas Lisboa API
  version: 1.0.0
  description: API for finding affordable rental properties in Lisbon area
paths:
  /api/counties/:
    get:
      operationId: counties_list
      description: |-
        ViewSet for viewing counties.
        Supports filtering by name and district.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - counties
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/County'
          description: ''
  /api/counties/{id}/:
    get:
      operationId: counties_retrieve
      description: |-
        ViewSet for viewing counties.
        Supports filtering by name and district.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this county.
        required: true
      tags:
      - counties
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/County'
          description: ''
  /api/counties/{id}/houses/:
    get:
      operationId: counties_houses_retrieve
      description: Get all houses in this county
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this county.
        required: true
      tags:
      - counties
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/County'
          description: ''
  /api/counties/{id}/parishes/:
    get:
      operationId: counties_parishes_retrieve
      description: Get all parishes in this county
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this county.
        required: true
      tags:
      - counties
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/County'
          description: ''
  /api/districts/:
    get:
      operationId: districts_list
      description: |-
        ViewSet for viewing districts.
        Supports filtering by name.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - districts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/District'
          description: ''
  /api/districts/{id}/:
    get:
      operationId: districts_retrieve
      description: |-
        ViewSet for viewing districts.
        Supports filtering by name.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - districts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
  /api/districts/{id}/counties/:
    get:
      operationId: districts_counties_retrieve
      description: Get all counties in this district
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - districts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
  /api/districts/{id}/houses/:
    get:
      operationId: districts_houses_retrieve
      description: Get all houses in this district
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - districts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
  /api/houses/:
    get:
      operationId: houses_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - houses
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHouseList'
          description: ''
    post:
      operationId: houses_create
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/{house_id}/:
    get:
      operationId: houses_retrieve
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    put:
      operationId: houses_update
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    patch:
      operationId: houses_partial_update
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHouseRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    delete:
      operationId: houses_destroy
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/houses/{house_id}/toggle_contacted/:
    post:
      operationId: houses_toggle_contacted_create
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/{house_id}/toggle_discarded/:
    post:
      operationId: houses_toggle_discarded_create
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/{house_id}/toggle_favorite/:
    post:
      operationId: houses_toggle_favorite_create
      parameters:
      - in: path
        name: house_id
        schema:
          type: string
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/run_scrapers/:
    post:
      operationId: houses_run_scrapers_create
      description: |-
        Trigger the run_scrapers management command

        Request body (optional):
        {
            "scrapers": ["ImoVirtual", "Idealista", "SuperCasa"],  // Optional: specific scrapers to run
            "all": true  // Optional: run all scrapers (default if no scrapers specified)
        }

        Available scrapers:
        - ImoVirtual
        - Idealista
        - Remax
        - ERA
        - CasaSapo
        - SuperCasa
      tags:
      - houses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/scraper_status/:
    get:
      operationId: houses_scraper_status_retrieve
      description: Get the status of all scrapers
      tags:
      - houses
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/parishes/:
    get:
      operationId: parishes_list
      description: |-
        ViewSet for viewing parishes.
        Supports filtering by name, county, and district.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - parishes
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parish'
          description: ''
  /api/parishes/{id}/:
    get:
      operationId: parishes_retrieve
      description: |-
        ViewSet for viewing parishes.
        Supports filtering by name, county, and district.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parish.
        required: true
      tags:
      - parishes
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parish'
          description: ''
  /api/parishes/{id}/houses/:
    get:
      operationId: parishes_houses_retrieve
      description: Get all houses in this parish
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parish.
        required: true
      tags:
      - parishes
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parish'
          description: ''
  /api/run-scrapers/:
    post:
      operationId: run_scrapers_create
      description: |-
        Trigger the run_scrapers management command

        Request body (optional):
        {
            "scrapers": ["ImoVirtual", "Idealista", "SuperCasa"],  // Optional: specific scrapers to run
            "all": true  // Optional: run all scrapers (default if no scrapers specified)
        }

        Available scrapers:
        - ImoVirtual
        - Idealista
        - Remax
        - ERA
        - CasaSapo
        - SuperCasa
      tags:
      - run-scrapers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HouseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HouseRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/scraper-status/:
    get:
      operationId: scraper_status_retrieve
      description: Get the status of all scrapers
      tags:
      - scraper-status
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/users/login/refresh/:
    post:
      operationId: users_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/logout/:
    post:
      operationId: users_logout_create
      tags:
      - users
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/users/password/change/:
    put:
      operationId: users_password_change_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
    patch:
      operationId: users_password_change_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/users/password/reset/confirm/:
    post:
      operationId: users_password_reset_confirm_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: ''
  /api/users/password/reset/request/:
    post:
      operationId: users_password_reset_request_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordEmailRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordEmail'
          description: ''
  /api/users/profile/:
    get:
      operationId: users_profile_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_profile_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_profile_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/register/:
    post:
      operationId: users_register_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
components:
  schemas:
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
        new_password2:
          type: string
      required:
      - new_password
      - new_password2
      - old_password
    ChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
        new_password2:
          type: string
          minLength: 1
      required:
      - new_password
      - new_password2
      - old_password
    County:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        district:
          allOf:
          - $ref: '#/components/schemas/District'
          readOnly: true
      required:
      - district
      - id
      - name
    CountyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    District:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    DistrictRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    House:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        zone:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        url:
          type: string
          format: uri
          maxLength: 500
        bedrooms:
          type: string
          readOnly: true
        area:
          type: string
          readOnly: true
        floor:
          type: string
          nullable: true
          maxLength: 50
        description:
          type: string
        parish:
          allOf:
          - $ref: '#/components/schemas/Parish'
          readOnly: true
        county:
          allOf:
          - $ref: '#/components/schemas/County'
          readOnly: true
        district:
          allOf:
          - $ref: '#/components/schemas/District'
          readOnly: true
        source:
          type: string
          maxLength: 50
        scraped_at:
          type: string
          format: date-time
        house_id:
          type: string
          maxLength: 100
        is_favorite:
          type: string
          readOnly: true
        is_contacted:
          type: string
          readOnly: true
        is_discarded:
          type: string
          readOnly: true
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
          readOnly: true
      required:
      - area
      - bedrooms
      - county
      - description
      - district
      - house_id
      - is_contacted
      - is_discarded
      - is_favorite
      - name
      - parish
      - photos
      - price
      - scraped_at
      - source
      - url
      - zone
    HouseRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        zone:
          type: string
          minLength: 1
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 500
        floor:
          type: string
          nullable: true
          maxLength: 50
        description:
          type: string
          minLength: 1
        source:
          type: string
          minLength: 1
          maxLength: 50
        scraped_at:
          type: string
          format: date-time
        house_id:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - description
      - house_id
      - name
      - price
      - scraped_at
      - source
      - url
      - zone
    PaginatedHouseList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/House'
    Parish:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        county:
          allOf:
          - $ref: '#/components/schemas/County'
          readOnly: true
      required:
      - county
      - id
      - name
    ParishRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    PatchedChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
        new_password2:
          type: string
          minLength: 1
    PatchedHouseRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        zone:
          type: string
          minLength: 1
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 500
        floor:
          type: string
          nullable: true
          maxLength: 50
        description:
          type: string
          minLength: 1
        source:
          type: string
          minLength: 1
          maxLength: 50
        scraped_at:
          type: string
          format: date-time
        house_id:
          type: string
          minLength: 1
          maxLength: 100
    PatchedUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
    Photo:
      type: object
      properties:
        image_url:
          type: string
          format: uri
          maxLength: 500
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - image_url
    PhotoRequest:
      type: object
      properties:
        image_url:
          type: string
          format: uri
          minLength: 1
          maxLength: 500
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - image_url
    ResetPassword:
      type: object
      properties:
        token:
          type: string
        new_password:
          type: string
        new_password2:
          type: string
      required:
      - new_password
      - new_password2
      - token
    ResetPasswordEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ResetPasswordEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
        new_password2:
          type: string
          minLength: 1
      required:
      - new_password
      - new_password2
      - token
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
      - email
      - id
      - username
    UserProfile:
      type: object
      properties:
        profile_picture:
          type: string
          format: uri
          nullable: true
        phone_number:
          type: string
          nullable: true
          pattern: ^\+?1?\d{9,15}$
          maxLength: 15
        preferred_zones: {}
        price_range_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        price_range_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        min_bedrooms:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        min_area:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        notification_enabled:
          type: boolean
    UserProfileRequest:
      type: object
      properties:
        profile_picture:
          type: string
          format: binary
          nullable: true
        phone_number:
          type: string
          nullable: true
          pattern: ^\+?1?\d{9,15}$
          maxLength: 15
        preferred_zones: {}
        price_range_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        price_range_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        min_bedrooms:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        min_area:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        notification_enabled:
          type: boolean
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
      - email
      - username
    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
      required:
      - email
      - password
      - password2
      - username
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
      required:
      - email
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://localhost:8000
  description: Local development server
- url: https://localhost:8000
  description: Local development server (HTTPS)
