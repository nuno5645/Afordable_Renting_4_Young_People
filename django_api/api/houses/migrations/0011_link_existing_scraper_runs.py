# Generated by Django 5.0.2 on 2025-03-13 17:38

from django.db import migrations
from django.utils import timezone

def link_scraper_runs(apps, schema_editor):
    MainRun = apps.get_model('houses', 'MainRun')
    ScraperRun = apps.get_model('houses', 'ScraperRun')
    
    # Get all scraper runs without a main run
    orphan_runs = ScraperRun.objects.filter(main_run__isnull=True)
    
    if orphan_runs.exists():
        # Create a default main run for historical data
        default_main_run = MainRun.objects.create(
            status='completed',
            start_time=orphan_runs.order_by('start_time').first().start_time,
            end_time=orphan_runs.order_by('-end_time').first().end_time or timezone.now(),
            total_houses=sum(run.total_houses for run in orphan_runs),
            new_houses=sum(run.new_houses for run in orphan_runs)
        )
        
        # Link all orphaned scraper runs to this main run
        orphan_runs.update(main_run=default_main_run)

def reverse_migration(apps, schema_editor):
    ScraperRun = apps.get_model('houses', 'ScraperRun')
    MainRun = apps.get_model('houses', 'MainRun')
    
    # Get the default main run (the oldest one)
    default_main_run = MainRun.objects.order_by('start_time').first()
    
    if default_main_run:
        # Set main_run to null for all scraper runs linked to the default main run
        ScraperRun.objects.filter(main_run=default_main_run).update(main_run=None)
        # Delete the default main run
        default_main_run.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('houses', '0010_house_area_str'),
    ]

    operations = [
        migrations.RunPython(link_scraper_runs, reverse_migration),
    ]
